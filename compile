#!/usr/bin/env python3
import os, subprocess

"""List of processes used in compilation. Order is arbitrary, commands are executed asynchronously.
    Each subdictionary should contain:
        command        list or string that will be passed to subprocess.Popen
        replacements   list of tuples where each tuple contains a needle string and a replacement function"""
procs = [
    {
        "command": ["compile-js", "js/app.js", "js/date.js"],
        "replacements": [
            ("""<script src="js/app.js"></script>""", lambda compiled : f"""<script>{compiled}</script>"""),
            ("""<script src="js/date.js"></script>""", lambda _ : ''),
        ],
    }, {
        "command": ["compile-css", "css/main.css"],
        "replacements": [
            ("""<link rel="stylesheet" type="text/css" href="css/main.css">""", lambda compiled : f"""<style>{compiled}</style>"""),
        ],
    },
]

os.chdir(os.path.dirname(os.path.abspath(__file__)))

for proc in procs:
    proc["Popen"] = subprocess.Popen(proc["command"], stdout=subprocess.PIPE)

html_code = open("source.html").read()

for proc in procs:
    proc["Popen"].wait()

for proc in procs:
    compiled = proc["Popen"].stdout.read().decode()
    for replacement in proc["replacements"]:
        html_code = html_code.replace(replacement[0], replacement[1](compiled))

html_proc = subprocess.Popen(["html-minifier", "--collapse-whitespace"], stdout=subprocess.PIPE, stdin=subprocess.PIPE)
html_proc.stdin.write(html_code.encode())
html_proc.stdin.close()
html_proc.wait()
result = html_proc.stdout.read().decode()
open("index.html", "w").write(result)
